#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, 'localhost');
server.on('error', onError);
server.on('listening', onListening);

const WebSocket = require('ws');
const crypto = require('crypto');
const fs = require('fs');
const { tmpdir } = require('os');
const { sep } = require('path');
const wss = new WebSocket.Server({server: server, path: '/ws', perMessageDeflate: false});
 
wss.on('connection', function connection(ws, req) {
  const routeId = crypto.randomBytes(8).toString('hex');
  const dir = `${tmpdir()}${sep}${routeId}`;
  const duplex = WebSocket.createWebSocketStream(ws);
  fs.mkdirSync(dir, { recursive: true });

  ws.on('close', () => {console.log('done'); ws.terminate();});
  ws.on('message', msg => {console.log('name:', msg)})

  duplex.pipe(fs.createWriteStream(`${dir}${sep}test.txt`))
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log(`Listening on ${addr.address}:${addr.port}`);
}

// module.exports = server;